//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const ADD = 57437
const MODIFY = 57438
const TABLE = 57439
const INDEX = 57440
const VIEW = 57441
const TO = 57442
const IGNORE = 57443
const IF = 57444
const UNIQUE = 57445
const USING = 57446
const PRIMARY = 57447
const COLUMN = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const BIT = 57457
const TINYINT = 57458
const SMALLINT = 57459
const MEDIUMINT = 57460
const INT = 57461
const INTEGER = 57462
const BIGINT = 57463
const INTNUM = 57464
const REAL = 57465
const DOUBLE = 57466
const FLOAT_TYPE = 57467
const DECIMAL = 57468
const NUMERIC = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const CHARSET = 57480
const TEXT = 57481
const TINYTEXT = 57482
const MEDIUMTEXT = 57483
const LONGTEXT = 57484
const BLOB = 57485
const TINYBLOB = 57486
const MEDIUMBLOB = 57487
const LONGBLOB = 57488
const JSON = 57489
const ENUM = 57490
const NULLX = 57491
const AUTO_INCREMENT = 57492
const APPROXNUM = 57493
const SIGNED = 57494
const UNSIGNED = 57495
const ZEROFILL = 57496
const DATABASES = 57497
const TABLES = 57498
const VITESS_KEYSPACES = 57499
const VITESS_SHARDS = 57500
const VSCHEMA_TABLES = 57501
const WARNINGS = 57502
const VARIABLES = 57503
const EVENTS = 57504
const BINLOG = 57505
const GTID = 57506
const STATUS = 57507
const COLUMNS = 57508
const CURRENT_TIMESTAMP = 57509
const DATABASE = 57510
const CURRENT_DATE = 57511
const CURRENT_TIME = 57512
const LOCALTIME = 57513
const LOCALTIMESTAMP = 57514
const UTC_DATE = 57515
const UTC_TIME = 57516
const UTC_TIMESTAMP = 57517
const REPLACE = 57518
const CONVERT = 57519
const CAST = 57520
const GROUP_CONCAT = 57521
const SEPARATOR = 57522
const MATCH = 57523
const AGAINST = 57524
const BOOLEAN = 57525
const LANGUAGE = 57526
const WITH = 57527
const QUERY = 57528
const EXPANSION = 57529
const UNUSED = 57530
const PARTITION = 57531
const PARTITIONS = 57532
const HASH = 57533
const XA = 57534
const ENGINES = 57535
const VERSIONS = 57536
const PROCESSLIST = 57537
const QUERYZ = 57538
const TXNZ = 57539
const KILL = 57540
const START = 57541
const TRANSACTION = 57542
const COMMIT = 57543
const SESSION = 57544
const ENGINE = 57545

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"START",
	"TRANSACTION",
	"COMMIT",
	"SESSION",
	"ENGINE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 346,
	104, 448,
	-2, 444,
	-1, 347,
	104, 449,
	-2, 445,
	-1, 511,
	5, 25,
	-2, 401,
	-1, 641,
	104, 451,
	-2, 447,
	-1, 754,
	5, 26,
	-2, 280,
	-1, 778,
	5, 26,
	-2, 402,
	-1, 861,
	5, 25,
	-2, 404,
	-1, 963,
	5, 26,
	-2, 405,
}

const yyPrivate = 57344

const yyLast = 6054

var yyAct = [...]int{

	347, 468, 991, 636, 852, 916, 300, 514, 793, 324,
	712, 672, 563, 851, 902, 244, 525, 673, 302, 831,
	715, 913, 746, 550, 624, 60, 669, 634, 631, 50,
	738, 653, 515, 601, 82, 233, 49, 639, 536, 263,
	289, 355, 298, 559, 253, 530, 287, 349, 237, 527,
	325, 44, 261, 1003, 81, 990, 54, 1002, 233, 322,
	204, 982, 1000, 989, 844, 896, 981, 638, 279, 186,
	589, 233, 233, 67, 68, 195, 283, 59, 210, 201,
	56, 57, 58, 698, 832, 64, 63, 543, 797, 687,
	867, 816, 551, 467, 3, 44, 504, 891, 702, 502,
	889, 727, 503, 249, 726, 181, 725, 271, 266, 834,
	936, 958, 960, 234, 235, 66, 724, 238, 239, 240,
	241, 242, 978, 977, 976, 836, 269, 840, 71, 835,
	480, 833, 70, 457, 458, 923, 838, 881, 243, 280,
	781, 752, 750, 682, 69, 466, 837, 703, 874, 362,
	276, 839, 841, 295, 281, 282, 62, 284, 720, 224,
	544, 806, 445, 435, 722, 206, 445, 420, 423, 633,
	182, 925, 209, 205, 219, 177, 217, 212, 199, 191,
	192, 176, 959, 208, 185, 190, 184, 203, 214, 215,
	183, 229, 180, 223, 179, 790, 222, 202, 723, 213,
	218, 200, 197, 178, 216, 198, 196, 193, 187, 551,
	807, 538, 211, 220, 230, 688, 681, 225, 226, 227,
	980, 968, 434, 433, 443, 444, 436, 437, 438, 439,
	440, 441, 442, 435, 538, 421, 445, 264, 846, 654,
	757, 875, 175, 873, 194, 228, 207, 189, 221, 292,
	350, 423, 721, 696, 719, 422, 421, 654, 233, 764,
	692, 233, 540, 188, 405, 928, 233, 541, 966, 233,
	233, 233, 423, 357, 233, 425, 878, 351, 233, 233,
	233, 233, 434, 433, 443, 444, 436, 437, 438, 439,
	440, 441, 442, 435, 270, 47, 445, 608, 426, 537,
	44, 495, 496, 877, 535, 604, 534, 353, 759, 424,
	758, 606, 607, 605, 285, 286, 455, 731, 732, 733,
	868, 711, 537, 739, 422, 421, 710, 699, 236, 469,
	438, 439, 440, 441, 442, 435, 478, 969, 445, 422,
	421, 423, 965, 352, 422, 421, 848, 454, 456, 422,
	421, 65, 857, 422, 421, 505, 423, 594, 596, 597,
	233, 423, 595, 233, 273, 265, 423, 497, 516, 625,
	423, 626, 939, 465, 876, 729, 470, 471, 472, 473,
	474, 475, 476, 521, 479, 481, 481, 481, 481, 481,
	481, 481, 481, 489, 490, 491, 492, 709, 499, 498,
	519, 933, 552, 553, 554, 264, 531, 233, 257, 512,
	258, 818, 233, 815, 501, 805, 565, 997, 288, 900,
	288, 517, 795, 274, 275, 591, 592, 791, 598, 599,
	268, 870, 869, 588, 798, 799, 800, 787, 602, 744,
	288, 288, 801, 693, 561, 562, 627, 603, 812, 811,
	809, 808, 511, 780, 288, 643, 288, 459, 460, 461,
	462, 463, 464, 366, 365, 505, 482, 483, 484, 485,
	486, 487, 488, 272, 469, 267, 20, 648, 649, 643,
	505, 314, 313, 315, 316, 317, 318, 641, 932, 931,
	319, 584, 585, 586, 587, 51, 802, 350, 22, 773,
	628, 629, 904, 907, 908, 909, 905, 44, 906, 910,
	680, 776, 973, 505, 642, 644, 516, 671, 651, 658,
	674, 470, 22, 860, 630, 670, 640, 680, 656, 248,
	684, 679, 744, 526, 546, 547, 548, 549, 662, 655,
	744, 661, 47, 972, 900, 509, 810, 510, 744, 556,
	557, 558, 493, 47, 545, 683, 22, 564, 61, 689,
	560, 675, 555, 44, 645, 250, 47, 670, 505, 517,
	700, 701, 678, 680, 691, 411, 406, 951, 685, 507,
	975, 600, 952, 974, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 948,
	47, 904, 907, 908, 909, 905, 676, 906, 910, 47,
	360, 949, 947, 363, 590, 602, 950, 953, 713, 908,
	909, 407, 408, 409, 603, 254, 255, 640, 995, 988,
	413, 414, 415, 416, 730, 714, 356, 505, 667, 734,
	666, 646, 647, 290, 879, 650, 716, 753, 704, 354,
	361, 705, 706, 707, 789, 291, 695, 930, 765, 657,
	929, 659, 660, 858, 233, 774, 728, 690, 566, 410,
	912, 251, 252, 356, 741, 665, 668, 245, 742, 469,
	899, 942, 364, 664, 763, 784, 246, 516, 51, 751,
	505, 941, 754, 755, 756, 526, 748, 760, 775, 786,
	418, 278, 766, 641, 767, 768, 769, 770, 277, 782,
	260, 920, 513, 783, 419, 53, 55, 48, 233, 1,
	792, 533, 777, 778, 779, 434, 433, 443, 444, 436,
	437, 438, 439, 440, 441, 442, 435, 528, 262, 445,
	517, 532, 640, 708, 872, 796, 539, 697, 505, 794,
	785, 817, 542, 505, 686, 529, 788, 927, 694, 567,
	735, 736, 737, 369, 583, 370, 820, 819, 847, 368,
	826, 641, 825, 372, 233, 371, 367, 72, 911, 843,
	829, 505, 505, 842, 915, 745, 674, 718, 828, 849,
	824, 845, 855, 323, 859, 850, 814, 717, 865, 803,
	804, 568, 743, 453, 663, 677, 494, 748, 348, 940,
	640, 898, 640, 762, 477, 652, 301, 593, 312, 309,
	830, 761, 311, 310, 856, 500, 508, 675, 231, 427,
	862, 299, 293, 957, 866, 854, 358, 903, 901, 853,
	863, 864, 772, 417, 895, 967, 506, 23, 52, 887,
	256, 259, 897, 19, 14, 13, 12, 233, 233, 27,
	10, 9, 8, 7, 259, 259, 6, 505, 5, 4,
	674, 505, 921, 861, 247, 855, 882, 924, 883, 926,
	21, 2, 505, 18, 17, 16, 15, 11, 0, 892,
	893, 0, 0, 822, 823, 894, 0, 0, 0, 0,
	0, 233, 233, 233, 233, 0, 944, 914, 946, 935,
	0, 675, 233, 44, 943, 233, 945, 713, 233, 855,
	855, 855, 855, 961, 505, 954, 640, 516, 962, 0,
	794, 0, 0, 855, 714, 0, 0, 0, 0, 0,
	0, 640, 938, 0, 971, 970, 469, 0, 0, 830,
	0, 856, 856, 856, 856, 871, 922, 0, 0, 0,
	956, 0, 0, 0, 0, 914, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 880, 983, 984, 0, 0,
	517, 0, 0, 964, 0, 0, 505, 505, 505, 993,
	994, 580, 0, 884, 885, 0, 886, 0, 505, 888,
	0, 890, 0, 0, 0, 579, 0, 0, 645, 0,
	0, 0, 0, 0, 979, 0, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 986, 987,
	582, 0, 0, 0, 0, 0, 0, 0, 996, 578,
	998, 999, 0, 0, 0, 992, 992, 992, 937, 0,
	0, 259, 0, 0, 259, 0, 0, 1001, 0, 404,
	0, 0, 259, 259, 259, 0, 0, 412, 0, 0,
	813, 259, 259, 259, 259, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 573, 569, 0, 572,
	574, 443, 444, 436, 437, 438, 439, 440, 441, 442,
	435, 387, 0, 445, 0, 0, 392, 393, 394, 395,
	396, 397, 398, 0, 399, 400, 401, 402, 403, 388,
	389, 390, 391, 373, 374, 0, 0, 376, 0, 577,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	0, 0, 0, 0, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 518, 520, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 0,
	0, 571, 0, 436, 437, 438, 439, 440, 441, 442,
	435, 0, 581, 445, 434, 433, 443, 444, 436, 437,
	438, 439, 440, 441, 442, 435, 0, 570, 445, 0,
	259, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 632,
	0, 297, 0, 0, 0, 186, 0, 296, 0, 0,
	333, 195, 0, 0, 210, 201, 0, 0, 0, 0,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 346, 314, 313, 315, 316, 317, 318, 637,
	520, 181, 319, 320, 321, 637, 637, 294, 307, 637,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 637, 637, 637, 637, 0, 0, 0,
	304, 305, 635, 0, 0, 0, 344, 0, 306, 0,
	637, 303, 308, 518, 433, 443, 444, 436, 437, 438,
	439, 440, 441, 442, 435, 224, 0, 445, 342, 0,
	0, 206, 0, 0, 0, 0, 182, 0, 209, 205,
	219, 177, 217, 212, 199, 191, 192, 176, 0, 208,
	185, 190, 184, 203, 214, 215, 183, 229, 180, 223,
	179, 0, 222, 202, 0, 213, 218, 200, 197, 178,
	216, 198, 196, 193, 187, 0, 0, 0, 211, 220,
	230, 0, 0, 225, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 334, 343, 340, 341, 338, 339, 337,
	336, 335, 345, 328, 329, 331, 0, 330, 175, 0,
	194, 228, 207, 189, 221, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 637, 434, 433, 443,
	444, 436, 437, 438, 439, 440, 441, 442, 435, 0,
	0, 445, 429, 0, 432, 637, 0, 0, 0, 0,
	446, 447, 448, 449, 450, 451, 452, 259, 430, 431,
	428, 434, 433, 443, 444, 436, 437, 438, 439, 440,
	441, 442, 435, 0, 518, 445, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 297, 0, 0, 0, 186, 0, 296,
	0, 0, 333, 195, 0, 0, 210, 201, 0, 0,
	0, 259, 326, 327, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 346, 314, 313, 315, 316, 317,
	318, 0, 0, 181, 319, 320, 321, 0, 637, 294,
	307, 0, 332, 0, 520, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 305, 635, 0, 0, 259, 344, 0,
	306, 0, 0, 303, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	342, 0, 0, 206, 0, 0, 0, 0, 182, 0,
	209, 205, 219, 177, 217, 212, 199, 191, 192, 176,
	0, 208, 185, 190, 184, 203, 214, 215, 183, 229,
	180, 223, 179, 0, 222, 202, 0, 213, 218, 200,
	197, 178, 216, 198, 196, 193, 187, 0, 0, 0,
	211, 220, 230, 0, 0, 225, 226, 227, 0, 0,
	259, 918, 0, 0, 0, 334, 343, 340, 341, 338,
	339, 337, 336, 335, 345, 328, 329, 331, 0, 330,
	175, 0, 194, 228, 207, 189, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 259, 259, 259, 259, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 259, 0,
	0, 918, 0, 0, 518, 163, 153, 125, 165, 102,
	117, 174, 118, 119, 145, 89, 133, 204, 115, 0,
	105, 84, 112, 85, 103, 127, 186, 130, 101, 155,
	136, 171, 195, 140, 0, 210, 201, 0, 0, 129,
	157, 131, 152, 124, 146, 95, 139, 166, 116, 143,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 142, 161, 114, 144, 83, 141, 0,
	87, 90, 173, 159, 108, 109, 0, 0, 0, 0,
	0, 0, 0, 128, 132, 149, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 138, 0, 0,
	0, 93, 88, 126, 0, 0, 0, 75, 0, 107,
	150, 0, 0, 0, 158, 123, 224, 160, 121, 120,
	164, 167, 206, 0, 156, 104, 113, 182, 111, 209,
	205, 219, 177, 217, 212, 199, 191, 192, 176, 0,
	208, 185, 190, 184, 203, 214, 215, 183, 229, 180,
	223, 179, 91, 222, 202, 92, 213, 218, 200, 197,
	178, 216, 198, 196, 193, 187, 0, 86, 0, 211,
	220, 230, 100, 73, 225, 226, 227, 76, 77, 0,
	78, 0, 79, 74, 98, 99, 96, 97, 134, 135,
	168, 169, 170, 151, 94, 0, 0, 154, 137, 175,
	0, 194, 228, 207, 189, 221, 0, 0, 0, 0,
	110, 172, 148, 147, 162, 0, 0, 0, 0, 0,
	188, 163, 153, 125, 165, 102, 117, 174, 118, 119,
	145, 89, 133, 204, 115, 0, 105, 84, 112, 85,
	103, 127, 186, 130, 101, 155, 136, 171, 195, 140,
	0, 210, 201, 0, 0, 129, 157, 131, 152, 124,
	146, 95, 139, 166, 116, 143, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 142,
	161, 114, 144, 83, 141, 0, 87, 90, 173, 159,
	108, 109, 0, 0, 0, 0, 0, 0, 0, 128,
	132, 149, 122, 0, 0, 0, 0, 0, 0, 934,
	0, 106, 0, 138, 0, 0, 0, 93, 88, 126,
	0, 0, 0, 522, 0, 107, 150, 0, 0, 0,
	158, 123, 224, 160, 121, 120, 164, 167, 206, 0,
	156, 104, 113, 182, 111, 209, 205, 219, 177, 217,
	212, 199, 191, 192, 176, 0, 208, 185, 190, 184,
	203, 214, 215, 183, 229, 180, 223, 179, 91, 222,
	202, 92, 213, 218, 200, 197, 178, 216, 198, 196,
	193, 187, 0, 86, 0, 211, 220, 230, 100, 523,
	225, 226, 227, 0, 0, 0, 0, 0, 0, 524,
	98, 99, 96, 97, 134, 135, 168, 169, 170, 151,
	94, 0, 0, 154, 137, 175, 0, 194, 228, 207,
	189, 221, 0, 0, 0, 0, 110, 172, 148, 147,
	162, 0, 0, 0, 0, 0, 188, 163, 153, 125,
	165, 102, 117, 174, 118, 119, 145, 89, 133, 204,
	115, 0, 105, 84, 112, 85, 103, 127, 186, 130,
	101, 155, 136, 171, 195, 140, 0, 210, 201, 0,
	0, 129, 157, 131, 152, 124, 146, 95, 139, 166,
	116, 143, 47, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 142, 161, 114, 144, 83,
	141, 0, 87, 90, 173, 159, 108, 109, 0, 0,
	0, 0, 0, 0, 0, 128, 132, 149, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 138,
	0, 0, 0, 93, 88, 126, 0, 0, 0, 522,
	0, 107, 150, 0, 0, 0, 158, 123, 224, 160,
	121, 120, 164, 167, 206, 0, 156, 104, 113, 182,
	111, 209, 205, 219, 177, 217, 212, 199, 191, 192,
	176, 0, 208, 185, 190, 184, 203, 214, 215, 183,
	229, 180, 223, 179, 91, 222, 202, 92, 213, 218,
	200, 197, 178, 216, 198, 196, 193, 187, 0, 86,
	0, 211, 220, 230, 100, 523, 225, 226, 227, 0,
	0, 0, 0, 0, 0, 524, 98, 99, 96, 97,
	134, 135, 168, 169, 170, 151, 94, 0, 0, 154,
	137, 175, 0, 194, 228, 207, 189, 221, 0, 0,
	0, 0, 110, 172, 148, 147, 162, 0, 0, 0,
	0, 0, 188, 163, 153, 125, 165, 102, 117, 174,
	118, 119, 145, 89, 133, 204, 115, 0, 105, 84,
	112, 85, 103, 127, 186, 130, 101, 155, 136, 171,
	195, 140, 0, 210, 201, 0, 0, 129, 157, 131,
	152, 124, 146, 95, 139, 166, 116, 143, 0, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 142, 161, 114, 144, 83, 141, 0, 87, 90,
	173, 159, 108, 109, 0, 0, 0, 0, 0, 0,
	0, 128, 132, 149, 122, 0, 0, 0, 0, 0,
	0, 827, 0, 106, 0, 138, 0, 0, 0, 93,
	88, 126, 0, 0, 0, 522, 0, 107, 150, 0,
	0, 0, 158, 123, 224, 160, 121, 120, 164, 167,
	206, 0, 156, 104, 113, 182, 111, 209, 205, 219,
	177, 217, 212, 199, 191, 192, 176, 0, 208, 185,
	190, 184, 203, 214, 215, 183, 229, 180, 223, 179,
	91, 222, 202, 92, 213, 218, 200, 197, 178, 216,
	198, 196, 193, 187, 0, 86, 0, 211, 220, 230,
	100, 523, 225, 226, 227, 0, 0, 0, 0, 0,
	0, 524, 98, 99, 96, 97, 134, 135, 168, 169,
	170, 151, 94, 0, 0, 154, 137, 175, 0, 194,
	228, 207, 189, 221, 0, 0, 0, 0, 110, 172,
	148, 147, 162, 0, 0, 0, 0, 0, 188, 163,
	153, 125, 165, 102, 117, 174, 118, 119, 145, 89,
	133, 204, 115, 0, 105, 84, 112, 85, 103, 127,
	186, 130, 101, 155, 136, 171, 195, 140, 0, 210,
	201, 0, 0, 129, 157, 131, 152, 124, 146, 95,
	139, 166, 116, 143, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 142, 161, 114,
	144, 83, 141, 0, 87, 90, 173, 159, 108, 109,
	0, 0, 0, 0, 0, 0, 0, 128, 132, 149,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 138, 0, 0, 0, 93, 88, 126, 0, 0,
	0, 522, 0, 107, 150, 0, 0, 0, 158, 123,
	224, 160, 121, 120, 164, 167, 206, 0, 156, 104,
	113, 182, 111, 209, 205, 219, 177, 217, 212, 199,
	191, 192, 176, 0, 208, 185, 190, 184, 203, 214,
	215, 183, 229, 180, 223, 179, 91, 222, 202, 92,
	213, 218, 200, 197, 178, 216, 198, 196, 193, 187,
	0, 86, 0, 211, 220, 230, 100, 523, 225, 226,
	227, 0, 0, 0, 0, 0, 0, 524, 98, 99,
	96, 97, 134, 135, 168, 169, 170, 151, 94, 0,
	0, 154, 137, 175, 0, 194, 228, 207, 189, 221,
	0, 0, 0, 0, 110, 172, 148, 147, 162, 0,
	0, 0, 0, 0, 188, 163, 153, 125, 165, 102,
	117, 174, 118, 119, 145, 89, 133, 204, 115, 0,
	105, 84, 112, 85, 103, 127, 186, 130, 101, 155,
	136, 171, 195, 140, 0, 210, 201, 0, 0, 129,
	157, 131, 152, 124, 146, 95, 139, 166, 116, 143,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 142, 161, 114, 144, 83, 141, 0,
	87, 90, 173, 159, 108, 109, 0, 0, 0, 0,
	0, 0, 0, 128, 132, 149, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 138, 0, 0,
	0, 93, 88, 126, 0, 0, 0, 522, 0, 107,
	150, 0, 0, 0, 158, 123, 224, 160, 121, 120,
	164, 167, 206, 0, 156, 104, 113, 182, 111, 209,
	205, 219, 177, 217, 212, 199, 191, 192, 176, 0,
	208, 185, 190, 184, 203, 214, 215, 183, 229, 180,
	223, 179, 91, 222, 202, 92, 213, 218, 200, 197,
	178, 216, 198, 196, 193, 187, 0, 86, 0, 211,
	220, 230, 100, 523, 225, 226, 227, 0, 0, 0,
	0, 0, 0, 524, 98, 99, 96, 97, 134, 135,
	168, 169, 170, 151, 94, 0, 0, 154, 137, 175,
	0, 194, 228, 207, 189, 221, 0, 0, 0, 0,
	110, 172, 148, 147, 162, 0, 0, 0, 0, 0,
	188, 163, 153, 125, 165, 102, 117, 174, 118, 119,
	145, 89, 133, 204, 115, 0, 105, 84, 112, 85,
	103, 127, 186, 130, 101, 155, 136, 171, 195, 140,
	0, 210, 201, 0, 0, 129, 157, 131, 152, 124,
	146, 95, 139, 166, 116, 143, 0, 0, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 142,
	161, 114, 144, 83, 141, 0, 87, 90, 173, 159,
	108, 109, 0, 0, 0, 0, 0, 0, 0, 128,
	132, 149, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 138, 0, 0, 0, 93, 88, 126,
	0, 0, 0, 522, 0, 107, 150, 0, 0, 0,
	158, 123, 224, 160, 121, 120, 164, 167, 206, 0,
	156, 104, 113, 182, 111, 209, 205, 219, 177, 217,
	212, 199, 191, 192, 176, 0, 208, 185, 190, 184,
	203, 214, 215, 183, 229, 180, 223, 179, 91, 222,
	202, 92, 213, 218, 200, 197, 178, 216, 198, 196,
	193, 187, 0, 86, 0, 211, 220, 230, 100, 523,
	225, 226, 227, 0, 0, 0, 0, 0, 0, 524,
	98, 99, 96, 97, 134, 135, 168, 169, 170, 151,
	94, 0, 0, 154, 137, 175, 0, 194, 228, 207,
	189, 221, 0, 0, 0, 0, 110, 172, 148, 147,
	162, 0, 204, 0, 0, 0, 188, 297, 0, 0,
	0, 186, 0, 296, 0, 0, 333, 195, 0, 0,
	210, 201, 0, 0, 0, 0, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 288, 346, 314,
	313, 315, 316, 317, 318, 0, 0, 181, 319, 320,
	321, 0, 0, 294, 307, 0, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 344, 0, 306, 0, 0, 303, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 342, 0, 0, 206, 0, 0,
	0, 0, 182, 0, 209, 205, 219, 177, 217, 212,
	199, 191, 192, 176, 0, 208, 185, 190, 184, 203,
	214, 215, 183, 229, 180, 223, 179, 0, 222, 202,
	0, 213, 218, 200, 197, 178, 216, 198, 196, 193,
	187, 0, 0, 0, 211, 220, 230, 0, 0, 225,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 334,
	343, 340, 341, 338, 339, 337, 336, 335, 345, 328,
	329, 331, 22, 330, 175, 0, 194, 228, 207, 189,
	221, 0, 0, 204, 0, 0, 0, 0, 297, 0,
	0, 0, 186, 0, 296, 188, 0, 333, 195, 0,
	0, 210, 201, 0, 0, 0, 0, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 346,
	314, 313, 315, 316, 317, 318, 0, 0, 181, 319,
	320, 321, 0, 0, 294, 307, 0, 332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 344, 0, 306, 0, 0, 303, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 342, 0, 0, 206, 0,
	0, 0, 0, 182, 0, 209, 205, 219, 177, 217,
	212, 199, 191, 192, 176, 0, 208, 185, 190, 184,
	203, 214, 215, 183, 229, 180, 223, 179, 0, 222,
	202, 0, 213, 218, 200, 197, 178, 216, 198, 196,
	193, 187, 0, 0, 0, 211, 220, 230, 0, 0,
	225, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	334, 343, 340, 341, 338, 339, 337, 336, 335, 345,
	328, 329, 331, 0, 330, 175, 0, 194, 228, 207,
	189, 221, 0, 204, 0, 0, 0, 0, 297, 0,
	0, 0, 186, 0, 296, 0, 188, 333, 195, 0,
	0, 210, 201, 0, 0, 0, 0, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 346,
	314, 313, 315, 316, 317, 318, 0, 0, 181, 319,
	320, 321, 0, 0, 294, 307, 0, 332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 344, 0, 306, 0, 0, 303, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 342, 0, 0, 206, 0,
	0, 0, 0, 182, 0, 209, 205, 219, 177, 217,
	212, 199, 191, 192, 176, 0, 208, 185, 190, 184,
	203, 214, 215, 183, 229, 180, 223, 179, 0, 222,
	202, 0, 213, 218, 200, 197, 178, 216, 198, 196,
	193, 187, 0, 0, 0, 211, 220, 230, 0, 0,
	225, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	334, 343, 340, 341, 338, 339, 337, 336, 335, 345,
	328, 329, 331, 204, 330, 175, 0, 194, 228, 207,
	189, 221, 186, 0, 0, 0, 0, 333, 195, 0,
	0, 210, 201, 0, 0, 0, 188, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 346,
	314, 313, 315, 316, 317, 318, 0, 0, 181, 319,
	320, 321, 0, 0, 0, 307, 0, 332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 344, 0, 306, 0, 0, 303, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 342, 0, 0, 206, 0,
	0, 0, 0, 182, 0, 209, 205, 219, 177, 217,
	212, 199, 191, 192, 176, 0, 208, 185, 190, 184,
	203, 214, 215, 183, 229, 180, 223, 179, 0, 222,
	202, 0, 213, 218, 200, 197, 178, 216, 198, 196,
	193, 187, 0, 0, 0, 211, 220, 230, 0, 0,
	225, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	334, 343, 340, 341, 338, 339, 337, 336, 335, 345,
	328, 329, 331, 204, 330, 175, 0, 194, 228, 207,
	189, 221, 186, 0, 0, 0, 0, 0, 195, 0,
	0, 210, 201, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 504,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 434, 433, 443, 444, 436, 437, 438,
	439, 440, 441, 442, 435, 0, 0, 445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 182, 0, 209, 205, 219, 177, 217,
	212, 199, 191, 192, 176, 0, 208, 185, 190, 184,
	203, 214, 215, 183, 229, 180, 223, 179, 0, 222,
	202, 0, 213, 218, 200, 197, 178, 216, 198, 196,
	193, 187, 0, 0, 0, 211, 220, 230, 0, 204,
	225, 226, 227, 747, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 195, 0, 0, 210, 201, 0,
	0, 0, 0, 0, 0, 175, 0, 194, 228, 207,
	189, 221, 0, 0, 0, 504, 0, 749, 0, 0,
	0, 0, 0, 0, 181, 0, 188, 0, 422, 421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 182,
	0, 209, 205, 219, 177, 217, 212, 199, 191, 192,
	176, 0, 208, 185, 190, 184, 203, 214, 215, 183,
	229, 180, 223, 179, 0, 222, 202, 0, 213, 218,
	200, 197, 178, 216, 198, 196, 193, 187, 22, 0,
	0, 211, 220, 230, 0, 0, 225, 226, 227, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 195, 0, 0, 210, 201, 0,
	0, 175, 0, 194, 228, 207, 189, 221, 0, 0,
	0, 0, 47, 0, 0, 232, 0, 0, 0, 0,
	0, 0, 188, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 182,
	0, 209, 205, 219, 177, 217, 212, 199, 191, 192,
	176, 0, 208, 185, 190, 184, 203, 214, 215, 183,
	229, 180, 223, 179, 0, 222, 202, 0, 213, 218,
	200, 197, 178, 216, 198, 196, 193, 187, 0, 0,
	0, 211, 220, 230, 0, 204, 225, 226, 227, 917,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	195, 0, 0, 210, 201, 0, 0, 0, 0, 0,
	0, 175, 0, 194, 228, 207, 189, 221, 0, 0,
	0, 232, 0, 919, 0, 0, 0, 0, 0, 0,
	181, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 182, 0, 209, 205, 219,
	177, 217, 212, 199, 191, 192, 176, 0, 208, 185,
	190, 184, 203, 214, 215, 183, 229, 180, 223, 179,
	0, 222, 202, 0, 213, 218, 200, 197, 178, 216,
	198, 196, 193, 187, 22, 0, 0, 211, 220, 230,
	0, 0, 225, 226, 227, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	195, 0, 0, 210, 201, 0, 0, 175, 0, 194,
	228, 207, 189, 221, 0, 0, 0, 0, 47, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 188, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 182, 0, 209, 205, 219,
	177, 217, 212, 199, 191, 192, 176, 0, 208, 185,
	190, 184, 203, 214, 215, 183, 229, 180, 223, 179,
	0, 222, 202, 0, 213, 218, 200, 197, 178, 216,
	198, 196, 193, 187, 0, 0, 0, 211, 220, 230,
	204, 0, 225, 226, 227, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 195, 0, 0, 210, 201,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 194,
	228, 207, 189, 221, 0, 0, 232, 0, 919, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	182, 0, 209, 205, 219, 177, 217, 212, 199, 191,
	192, 176, 0, 208, 185, 190, 184, 203, 214, 215,
	183, 229, 180, 223, 179, 0, 222, 202, 0, 213,
	218, 200, 197, 178, 216, 198, 196, 193, 187, 0,
	0, 0, 211, 220, 230, 0, 204, 225, 226, 227,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 195, 0, 0, 210, 201, 0, 0, 0, 0,
	0, 0, 175, 0, 194, 228, 207, 189, 221, 47,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 182, 0, 209, 205,
	219, 177, 217, 212, 199, 191, 192, 176, 0, 208,
	185, 190, 184, 203, 214, 215, 183, 229, 180, 223,
	179, 0, 222, 202, 0, 213, 218, 200, 197, 178,
	216, 198, 196, 193, 187, 0, 0, 0, 211, 220,
	230, 204, 0, 225, 226, 227, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 195, 0, 0, 210,
	201, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	194, 228, 207, 189, 221, 0, 0, 504, 0, 749,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 182, 0, 209, 205, 219, 177, 217, 212, 199,
	191, 192, 176, 0, 208, 185, 190, 184, 203, 214,
	215, 183, 229, 180, 223, 179, 0, 222, 202, 0,
	213, 218, 200, 197, 178, 216, 198, 196, 193, 187,
	0, 0, 0, 211, 220, 230, 204, 0, 225, 226,
	227, 0, 0, 0, 359, 186, 0, 0, 0, 0,
	0, 195, 0, 0, 210, 201, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 194, 228, 207, 189, 221,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 182, 0, 209, 205,
	219, 177, 217, 212, 199, 191, 192, 176, 0, 208,
	185, 190, 184, 203, 214, 215, 183, 229, 180, 223,
	179, 0, 222, 202, 0, 213, 218, 200, 197, 178,
	216, 198, 196, 193, 187, 0, 0, 0, 211, 220,
	230, 204, 0, 225, 226, 227, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 195, 0, 0, 210,
	201, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	194, 228, 207, 189, 221, 0, 0, 504, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 182, 0, 209, 205, 219, 177, 217, 212, 199,
	191, 192, 176, 0, 208, 185, 190, 184, 203, 214,
	215, 183, 229, 180, 223, 179, 0, 222, 202, 0,
	213, 218, 200, 197, 178, 216, 198, 196, 193, 187,
	0, 0, 0, 211, 220, 230, 204, 0, 225, 226,
	227, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 195, 0, 0, 210, 201, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 194, 228, 207, 189, 221,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 182, 0, 209, 205,
	219, 177, 217, 212, 199, 191, 192, 176, 0, 208,
	185, 190, 184, 203, 214, 215, 183, 229, 180, 223,
	179, 0, 222, 202, 0, 213, 218, 200, 197, 178,
	216, 198, 196, 193, 187, 0, 0, 0, 211, 220,
	230, 204, 0, 225, 226, 227, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 195, 0, 0, 210,
	201, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	194, 228, 207, 189, 221, 0, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 182, 0, 209, 205, 219, 177, 217, 212, 199,
	191, 192, 176, 0, 208, 185, 190, 184, 203, 214,
	215, 183, 229, 180, 223, 179, 0, 222, 202, 0,
	213, 218, 200, 197, 178, 216, 198, 196, 193, 187,
	0, 0, 0, 211, 220, 230, 0, 0, 225, 226,
	227, 22, 45, 24, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 175, 26, 194, 228, 207, 189, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 188, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 29, 30, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	41, 36, 0, 0, 42, 43, 31, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 35, 0, 0, 0, 0, 0,
	37, 38, 0, 39,
}
var yyPact = [...]int{

	5835, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	674, 710, -1000, -1000, -1000, -1000, -1000, 508, -29, -3,
	-41, 18, 14, 1710, 5664, -1000, -1000, 272, -169, -1000,
	-1000, -1000, -1000, -1000, 550, -1000, -1000, -1000, -1000, -1000,
	661, 671, 559, 652, 588, -1000, -3, 5664, 700, -1000,
	-154, 352, -11, 422, -11, 12, -1000, -12, 420, -12,
	5664, 5664, -1000, 698, 691, -46, -1000, -1000, -103, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 389, 625, 3586, 3586, 674, -1000, 550,
	-1000, -1000, -1000, 616, -1000, -1000, 212, 5199, 621, 45,
	5664, 667, 412, -1000, 974, 5664, 196, 527, 5664, 5664,
	5664, 647, 526, 5664, -1000, -1000, -1000, 5664, 5664, 5664,
	5664, -1000, -1000, 690, -1000, -1000, -1000, -1000, -1000, -1000,
	706, 81, 258, -1000, 3586, 1374, 503, 503, -1000, -1000,
	28, -1000, -1000, 3766, 3766, 3766, 3766, 3766, 3766, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 503, 41, -1000, 3396, 503, 503, 503, 503,
	503, 503, 3586, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, -1000, -1000, 501, -1000,
	278, 661, 389, 588, 43, 539, -1000, -1000, 516, 5664,
	-1000, 5509, 3006, 684, -159, -175, 184, 199, -83, -1000,
	-1000, 504, -1000, 504, 504, 504, 504, -60, -60, -60,
	-60, -1000, -1000, -1000, -1000, -1000, 512, -1000, 504, 504,
	504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 510,
	510, 510, 507, 507, -1000, 646, 5664, -1000, 977, -1000,
	-1000, 5664, -1000, -1000, -1000, -1000, -1000, 661, -111, -1000,
	579, 3586, 3586, 294, 3586, 3586, 85, 3766, 245, 227,
	3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
	3766, 3766, 3766, 3766, 3766, 316, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 393, -1000, 550, 427, 427, 61,
	61, 61, 61, 61, 3946, 1199, 2790, 389, 404, 283,
	3396, 1471, 1471, 3586, 3586, 1471, 653, 167, 283, 5354,
	-1000, 389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1471,
	1471, 1471, 1471, 3586, -1000, -1000, -1000, 625, -1000, 653,
	665, -1000, 609, 607, -1000, -1000, 1471, -1000, 518, 5509,
	503, -1000, 4578, -1000, 522, -1000, 140, -1000, 39, -1000,
	-1000, -1000, -1000, -1000, -1000, 674, 3586, 503, -1000, -78,
	139, -1000, -1000, 509, 640, 207, 390, -1000, -1000, 628,
	-1000, 190, -88, -1000, -1000, 271, -60, -60, -1000, -1000,
	46, 619, 46, 46, 46, 342, -1000, -1000, -1000, -1000,
	270, -1000, -1000, -1000, 265, -1000, -1000, 2142, -1000, 137,
	122, -1, -17, -19, -22, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 320,
	598, 85, 168, -1000, -1000, 254, -1000, -1000, 283, 283,
	638, -1000, -1000, -1000, -1000, 245, 3766, 3766, 3766, 195,
	638, 1340, 1002, 1216, 61, 237, 237, 65, 65, 65,
	65, 65, 1082, 1082, -1000, -1000, -1000, 389, -1000, -1000,
	-1000, 389, 1471, 497, -1000, -1000, 4102, 38, 503, 37,
	-1000, -1000, -1000, 3586, -1000, 389, 388, 388, 189, 287,
	388, 1471, 185, -1000, 3586, 389, -1000, 388, 389, 388,
	388, -1000, -1000, 5664, -1000, -1000, -1000, -1000, 489, -1000,
	639, 476, 460, -1000, -1000, 3205, 389, 402, 36, 674,
	5509, 3586, 2790, 661, 283, 384, 626, 119, 374, 5354,
	-1000, 369, -1000, -1000, -79, 379, -1000, -1000, -1000, 444,
	46, 46, -1000, 362, 108, -1000, -1000, -1000, 399, -1000,
	495, 397, -1000, -1000, -1000, -1000, -1000, 5664, -1000, -1000,
	-1000, -1000, -1000, 360, -61, 508, 358, 352, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 195, 638, 1097, -1000, 3766,
	3766, -1000, -1000, 388, 1471, -1000, -1000, 5044, -1000, -1000,
	2358, 1471, 2574, 283, -1000, -1000, -1000, -18, 316, -18,
	-135, 481, 163, -1000, 3586, 273, -1000, -1000, -1000, -1000,
	-1000, -1000, 684, 4889, 636, -1000, 503, -1000, -1000, 492,
	5354, 5354, 661, -1000, 283, -1000, -1000, 389, -1000, -65,
	264, -1000, 380, -1000, 504, -1000, 121, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 319,
	247, -1000, 220, -1000, -1000, -1000, 615, -1000, -1000, -1000,
	-1000, 3766, 638, 638, -1000, -1000, -1000, -1000, 33, 389,
	-1000, 389, 504, 504, -1000, 504, 507, -1000, 504, -37,
	504, -40, 389, 389, 503, -132, -1000, 283, 3586, 668,
	493, 562, -1000, -1000, -1000, 649, 4262, 4418, 703, -1000,
	503, -1000, 550, 31, -1000, -1000, 2142, 95, -1000, -1000,
	5354, -1000, 203, 633, -1000, 630, -1000, 437, 436, 348,
	638, 1926, -1000, -1000, -1000, 57, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3766, 389, 317, 283, 678, 666,
	4889, 4889, 4889, 4889, -1000, 573, 560, -1000, 572, 538,
	578, 5664, -1000, 368, 4262, 64, -1000, 4733, -1000, -1000,
	5509, 460, 389, 5354, -1000, 289, -1000, -1000, 213, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 135, -1000, -1000,
	-1000, 3586, 3586, 562, 494, 463, -1000, -1000, -1000, -1000,
	544, -1000, 541, -1000, -1000, -1000, -1000, -1000, 9, 8,
	7, -1000, 459, -1000, -1000, -1000, -1000, 389, 20, -142,
	283, 428, 3586, 3586, -1000, -1000, 503, 503, 503, -1000,
	593, -138, -149, 283, 283, 5354, 5354, 5354, -1000, 592,
	-1000, 366, -1000, 366, 366, -140, -1000, 5354, -1000, -1000,
	-146, -1000, -151, -1000,
}
var yyPgo = [...]int{

	0, 887, 886, 885, 884, 883, 881, 93, 476, 880,
	874, 869, 868, 866, 863, 862, 861, 860, 859, 856,
	855, 854, 853, 56, 850, 848, 847, 41, 846, 44,
	845, 844, 843, 30, 169, 28, 27, 3, 842, 21,
	13, 4, 839, 838, 14, 837, 352, 836, 835, 833,
	2, 16, 832, 831, 829, 826, 42, 153, 825, 823,
	822, 819, 818, 817, 33, 1, 11, 9, 17, 816,
	18, 6, 815, 31, 814, 813, 811, 809, 29, 808,
	47, 806, 15, 40, 805, 26, 7, 32, 804, 351,
	803, 294, 365, 801, 797, 787, 20, 0, 59, 67,
	22, 785, 793, 37, 5, 784, 778, 77, 10, 24,
	19, 777, 776, 775, 773, 769, 765, 763, 160, 758,
	757, 23, 98, 756, 755, 754, 752, 747, 43, 12,
	746, 745, 744, 743, 39, 741, 38, 25, 738, 737,
	721, 8, 720, 719, 717, 50, 46, 716, 130,
}
var yyR1 = [...]int{

	0, 143, 144, 144, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 15, 15, 15, 15,
	18, 137, 139, 124, 124, 123, 123, 125, 125, 138,
	138, 138, 134, 112, 112, 112, 115, 115, 113, 113,
	113, 113, 113, 113, 113, 114, 114, 114, 114, 114,
	116, 116, 116, 116, 116, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 133,
	133, 118, 118, 128, 128, 129, 129, 129, 126, 126,
	127, 127, 130, 130, 130, 119, 119, 119, 119, 119,
	131, 131, 121, 121, 121, 122, 122, 132, 132, 132,
	132, 132, 120, 120, 135, 140, 140, 140, 140, 136,
	136, 142, 142, 141, 16, 16, 16, 16, 16, 16,
	16, 16, 17, 17, 17, 1, 19, 2, 3, 4,
	5, 5, 111, 111, 111, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 32, 32, 21, 22, 22, 22,
	22, 147, 23, 24, 24, 25, 25, 25, 29, 29,
	29, 27, 27, 28, 28, 35, 35, 34, 34, 36,
	36, 36, 36, 101, 101, 101, 100, 100, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 48, 42, 42,
	42, 42, 106, 106, 105, 105, 105, 104, 104, 43,
	43, 43, 43, 44, 44, 44, 44, 45, 45, 47,
	47, 46, 46, 49, 49, 49, 49, 50, 50, 51,
	51, 37, 37, 37, 37, 37, 37, 37, 90, 90,
	53, 53, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 63, 63, 63, 63, 63, 63, 54, 54,
	54, 54, 54, 54, 54, 33, 33, 64, 64, 64,
	70, 65, 65, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 61, 61, 61, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
	60, 60, 60, 148, 148, 62, 62, 62, 62, 30,
	30, 30, 30, 30, 109, 109, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 74,
	74, 31, 31, 72, 72, 73, 75, 75, 71, 71,
	71, 56, 56, 56, 56, 56, 56, 56, 58, 58,
	58, 76, 76, 77, 77, 78, 78, 79, 79, 80,
	81, 81, 81, 82, 82, 82, 82, 83, 83, 83,
	55, 55, 55, 55, 55, 55, 84, 84, 84, 84,
	85, 85, 66, 66, 68, 68, 67, 69, 86, 86,
	87, 88, 88, 91, 91, 92, 92, 89, 89, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 94,
	94, 94, 95, 95, 98, 98, 99, 99, 102, 102,
	103, 103, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 145, 146, 107, 108, 108, 108,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 2, 2, 9, 4, 6,
	4, 4, 3, 0, 3, 0, 4, 0, 3, 1,
	3, 3, 7, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 4, 5, 4, 3, 3, 2, 2, 3,
	3, 2, 1, 1, 1, 3, 5, 5, 5, 5,
	3, 3, 6, 3, 0, 3, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -143, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 107, 108,
	109, 131, 111, 124, 47, 209, 126, 215, 216, 218,
	24, 125, 129, 130, -145, 7, 193, 50, -144, 221,
	-78, 14, -25, 5, -23, -147, -23, -23, -23, -107,
	-137, 50, 185, 115, 114, -89, 118, 114, 115, 185,
	114, 114, -111, 173, 183, 107, 177, 178, 180, 182,
	53, -96, -97, 67, 21, 23, 167, 70, 102, 15,
	71, 152, 155, 101, 194, 45, 186, 187, 184, 185,
	172, 28, 9, 24, 125, 20, 95, 109, 74, 75,
	210, 128, 22, 126, 65, 18, 48, 10, 12, 13,
	119, 118, 86, 115, 43, 7, 103, 25, 83, 39,
	27, 41, 84, 16, 188, 189, 30, 198, 97, 46,
	33, 68, 63, 49, 66, 14, 44, 213, 212, 85,
	110, 193, 42, 6, 197, 29, 124, 40, 114, 73,
	117, 64, 214, 5, 120, 8, 47, 121, 190, 191,
	192, 31, 211, 72, 11, 199, 138, 132, 160, 151,
	149, 62, 127, 147, 143, 141, 26, 165, 220, 204,
	142, 136, 137, 164, 201, 32, 163, 159, 162, 135,
	158, 36, 154, 144, 17, 130, 122, 203, 140, 129,
	35, 169, 134, 156, 145, 146, 161, 133, 157, 131,
	170, 205, 153, 150, 116, 174, 175, 176, 202, 148,
	171, -102, 53, -97, -107, -107, 56, 217, -107, -107,
	-107, -107, -107, -7, -82, 16, 15, -10, -8, -145,
	6, 19, 20, -29, 37, 38, -24, -89, -46, -102,
	10, 206, -138, -134, 53, -92, 119, 53, -92, 114,
	-91, 119, 53, -91, -46, -46, -107, 10, 10, 114,
	185, -107, -107, 179, -107, -107, -107, -146, 52, -83,
	18, 30, -37, -52, 68, -57, 28, 22, -56, -53,
	-71, -69, -70, 102, 91, 92, 99, 69, 103, -61,
	-59, -60, -62, 55, 54, 56, 57, 58, 59, 63,
	64, 65, -98, -102, -67, -145, 41, 42, 194, 195,
	198, 196, 71, 31, 184, 192, 191, 190, 188, 189,
	186, 187, 119, 185, 97, 193, 53, -97, -79, -80,
	-37, -78, -7, -23, 33, -27, 20, 61, -47, 25,
	-46, 29, 104, -46, 15, 52, 51, -112, -115, -117,
	-116, -113, -114, 149, 150, 102, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 127, 145, 146,
	147, 148, 132, 133, 134, 135, 136, 137, 138, 140,
	141, 142, 143, 144, -102, 68, 49, -46, -46, -46,
	22, 49, -102, -46, -46, -46, -46, -32, 10, 8,
	86, 67, 66, 83, 51, 17, -37, -54, 86, 68,
	84, 85, 70, 88, 87, 98, 91, 92, 93, 94,
	95, 96, 97, 89, 90, 101, 76, 77, 78, 79,
	80, 81, 82, -90, -145, -70, -145, 105, 106, -57,
	-57, -57, -57, -57, -57, -145, 104, -7, -65, -37,
	-145, -145, -145, -145, -145, -145, -145, -74, -37, -145,
	-148, -145, -148, -148, -148, -148, -148, -148, -148, -145,
	-145, -145, -145, 51, -81, 23, 24, -82, -146, -29,
	-58, -98, 56, 59, 53, -97, -28, 40, -55, 29,
	31, -7, -145, -46, -86, -87, -71, -98, -102, -103,
	-102, -96, 107, 173, 183, -51, 11, 208, -139, -124,
	220, -134, -135, -140, 122, 120, -136, 115, 27, -130,
	63, 68, -126, 170, -118, 50, -118, -118, -118, -118,
	-121, 152, -121, -121, -121, 50, -118, -118, -118, -128,
	50, -128, -128, -129, 50, -129, 22, -46, -93, 110,
	220, 194, 112, 109, 113, 108, 167, 152, 62, 28,
	14, 205, 53, -46, -107, -107, -107, -107, -82, 181,
	35, -37, -37, -63, 63, 68, 64, 65, -37, -37,
	-57, -64, -67, -70, 60, 86, 84, 85, 70, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -109, 53, 55, 53, -56, -56,
	-98, -35, 20, -34, -36, 93, -37, -102, -99, -103,
	-98, -96, -146, 51, -146, -7, -34, -34, -37, -37,
	-34, -27, -72, -73, 72, -98, -146, -34, -35, -34,
	-34, -80, -83, -88, 18, 10, 31, 31, -34, -85,
	49, -86, -66, -68, -67, -145, -7, -84, -98, -51,
	51, 76, 104, -78, -37, -145, -125, 167, 76, 50,
	27, -136, 53, 53, -119, 28, 63, -127, 171, 56,
	-121, -121, -122, 101, 29, -122, -122, -122, -133, 55,
	56, 56, -108, -145, -99, -96, -107, -94, -95, 117,
	21, 115, 27, 76, 117, 123, 123, 123, -107, 55,
	36, 63, 64, 65, -64, -57, -57, -57, -33, 128,
	67, -146, -146, -34, 51, -101, -100, 21, -98, 55,
	104, -145, 104, -37, -146, -146, -146, 51, 121, 21,
	-146, -34, -75, -73, 74, -37, -146, -146, -146, -146,
	-146, -46, -38, 10, 26, -85, 51, -146, -146, -146,
	51, 104, -78, -87, -37, -99, -82, 53, -123, 28,
	76, 53, -142, -141, -98, 53, -131, 167, 55, 56,
	57, 63, 52, -122, -122, 53, 53, 102, 52, 51,
	51, 52, 51, -46, -107, 53, 152, -137, 53, -134,
	-33, 67, -57, -57, -146, -36, -100, 93, -103, -35,
	-99, -110, 102, 149, 127, 147, 143, 164, 154, 169,
	145, 170, -109, -110, 199, -78, 75, -37, 73, -51,
	-39, -40, -41, -42, -48, -70, -145, -46, 27, -68,
	31, -7, -145, -98, -98, -82, -146, 155, 56, 52,
	51, -118, -132, 122, 27, 120, 55, 56, 56, 29,
	-57, 104, -146, -146, -118, -118, -118, -129, -118, 137,
	-118, 137, -146, -146, -145, -31, 197, -37, -76, 12,
	51, -43, -44, -45, 39, 43, 45, 40, 41, 42,
	46, -106, 21, -39, -145, -105, -104, 21, -102, 55,
	8, -66, -7, 104, -108, 76, -141, -120, 62, 27,
	27, 52, 52, 53, 93, -121, 53, -57, -146, 55,
	-77, 13, 15, -40, -41, -40, -41, 39, 39, 39,
	44, 39, 44, 39, -44, -102, -146, -49, 47, 118,
	48, -104, -86, -146, -98, 53, 55, -30, 86, 202,
	-37, -65, 49, 49, 39, 39, 115, 115, 115, -146,
	200, 46, 203, -37, -37, -145, -145, -145, 36, 201,
	204, -50, -98, -50, -50, 36, -146, 51, -146, -146,
	202, -98, 203, 204,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	385, 0, 171, 171, 171, 171, 605, 0, 0, 427,
	0, 0, 0, 0, 0, 605, 605, 0, 0, 605,
	605, 605, 605, 605, 0, 31, 32, 603, 1, 3,
	393, 0, 0, 175, 178, 173, 427, 0, 0, 35,
	36, 0, 425, 0, 425, 0, 428, 423, 0, 423,
	0, 0, 605, 529, 530, 464, 605, 605, 0, 605,
	152, 153, 154, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 166, 448, 449, 147, 148, 605, 605, 151, 167,
	168, 169, 170, 25, 397, 0, 0, 385, 27, 0,
	171, 176, 177, 181, 179, 180, 172, 0, 0, 231,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 146, 155, 0, 0, 0,
	0, 160, 161, 164, 163, 149, 150, 26, 604, 21,
	0, 0, 394, 241, 0, 246, 248, 0, 283, 284,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 309,
	310, 311, 312, 371, 372, 373, 374, 375, 376, 377,
	250, 251, 368, 0, 417, 0, 0, 0, 0, 0,
	0, 0, 359, 0, 333, 333, 333, 333, 333, 333,
	333, 333, 0, 0, 0, 0, -2, -2, 386, 387,
	390, 393, 25, 178, 0, 183, 182, 174, 0, 0,
	230, 0, 0, 239, 0, 43, 0, 102, 98, 54,
	55, 91, 57, 91, 91, 91, 91, 112, 112, 112,
	112, 83, 84, 85, 86, 87, 0, 70, 91, 91,
	91, 74, 58, 59, 60, 61, 62, 63, 64, 93,
	93, 93, 95, 95, 38, 0, 0, 40, 0, 142,
	424, 0, 144, 605, 605, 605, 605, 393, 0, 398,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	272, 273, 274, 247, 0, 261, 0, 0, 0, 303,
	304, 305, 306, 307, 0, 185, 0, 25, 0, 281,
	0, 0, 0, 0, 0, 0, 181, 0, 360, 0,
	325, 0, 326, 327, 328, 329, 330, 331, 332, 0,
	185, 0, 0, 0, 389, 391, 392, 397, 28, 181,
	0, 378, 0, 0, 444, 445, 0, 184, 410, 0,
	0, -2, 0, 229, 239, 418, 0, 368, 0, 232,
	450, 451, 464, 529, 530, 385, 0, 0, 41, 47,
	0, 50, 51, 0, 0, 0, 0, 129, 130, 105,
	103, 0, 100, 99, 56, 0, 112, 112, 77, 78,
	115, 0, 115, 115, 115, 0, 71, 72, 73, 65,
	0, 66, 67, 68, 0, 69, 426, 606, 605, 439,
	0, 436, 0, 434, 0, 429, 430, 431, 432, 433,
	435, 437, 438, 143, 156, 157, 158, 159, 605, 0,
	0, 242, 243, 245, 262, 0, 264, 266, 395, 396,
	252, 253, 277, 278, 279, 0, 0, 0, 0, 275,
	257, 0, 288, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 298, 299, 302, 344, 345, 0, 300, 301,
	308, 0, 0, 186, 187, 189, 193, 0, 369, 0,
	446, -2, 280, 0, 416, 25, 0, 0, 0, 0,
	0, 0, 366, 363, 0, 0, 334, 0, 0, 0,
	0, 388, 22, 0, 421, 422, 379, 380, 198, 29,
	0, 410, 400, 412, 414, 0, 25, 0, 406, 385,
	0, 0, 0, 393, 240, 0, 45, 0, 0, 0,
	125, 0, 127, 128, 110, 0, 104, 53, 101, 0,
	115, 115, 79, 0, 0, 80, 81, 82, 0, 89,
	0, 0, 39, 607, 608, 447, 134, 0, 605, 440,
	441, 442, 443, 0, 0, 0, 0, 0, 162, 165,
	399, 263, 265, 267, 254, 275, 258, 0, 255, 0,
	0, 249, 313, 0, 0, 190, 194, 0, 196, 197,
	0, 185, 0, 282, -2, 316, 317, 0, 0, 0,
	0, 385, 0, 364, 0, 0, 324, 335, 336, 337,
	338, 23, 239, 0, 0, 30, 0, 415, -2, 0,
	0, 0, 393, 419, 420, 369, 34, 0, 42, 0,
	0, 44, 0, 131, 91, 126, 117, 111, 106, 107,
	108, 109, 92, 75, 76, 116, 113, 114, 88, 0,
	0, 96, 0, 135, 136, 137, 0, 139, 140, 141,
	256, 0, 276, 259, 314, 188, 195, 191, 0, 0,
	370, 0, 91, 91, 349, 91, 95, 352, 91, 354,
	91, 357, 0, 0, 0, 361, 323, 367, 0, 381,
	199, 200, 202, 203, 204, 212, 0, 214, 0, 413,
	0, -2, 0, 408, 407, 33, 606, 0, 48, 124,
	0, 133, 122, 0, 119, 121, 90, 0, 0, 0,
	260, 0, 315, 318, 346, 112, 350, 351, 353, 355,
	356, 358, 320, 319, 0, 0, 0, 365, 383, 0,
	0, 0, 0, 0, 219, 0, 0, 222, 0, 0,
	0, 0, 213, 0, 0, 233, 215, 0, 217, 218,
	0, 403, 25, 0, 37, 0, 132, 52, 0, 118,
	120, 94, 97, 138, 192, 347, 348, 339, 322, 362,
	24, 0, 0, 201, 208, 0, 211, 220, 221, 223,
	0, 225, 0, 227, 228, 205, 206, 207, 0, 0,
	0, 216, 411, -2, 409, 46, 123, 0, 0, 0,
	384, 382, 0, 0, 224, 226, 0, 0, 0, 321,
	0, 0, 0, 209, 210, 0, 0, 0, 340, 0,
	343, 0, 237, 0, 0, 341, 234, 0, 235, 236,
	0, 238, 0, 342,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 221,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:263
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:268
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:269
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:273
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:295
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:303
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:307
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:320
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:324
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:330
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:341
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:352
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:364
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:374
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Set{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:392
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:398
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:405
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:413
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:420
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:431
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:438
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:444
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:448
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:453
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:462
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:466
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:477
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:487
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:497
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:665
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:670
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:674
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:679
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:683
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:691
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:695
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:701
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:709
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:718
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:722
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:741
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:749
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:753
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:762
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:771
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:775
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:779
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:784
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:793
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:797
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:805
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:814
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:818
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:824
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:830
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:834
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:838
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:858
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:862
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:874
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:878
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:883
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:888
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:892
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:896
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:900
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:904
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:911
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:919
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:924
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:946
		{
			yyVAL.statement = &Xa{}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.statement = &Explain{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:958
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:964
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:993
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:997
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.statement = &OtherRead{}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.statement = &OtherRead{}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1063
		{
			setAllowComments(yylex, true)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.bytes2 = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = UnionStr
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.str = UnionAllStr
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.str = UnionDistinctStr
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.str = SQLCacheStr
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.str = DistinctStr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.str = StraightJoinHint
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.selectExprs = nil
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.empty = struct{}{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.empty = struct{}{}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.str = JoinStr
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.str = JoinStr
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.str = JoinStr
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.str = StraightJoinStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.str = LeftJoinStr
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.str = LeftJoinStr
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.str = RightJoinStr
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.str = RightJoinStr
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = NaturalJoinStr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1318
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.indexHints = nil
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.expr = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.str = ""
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.str = IsNullStr
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.str = IsNotNullStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.str = IsTrueStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.str = IsNotTrueStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.str = IsFalseStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.str = IsNotFalseStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.str = EqualStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.str = LessThanStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.str = GreaterThanStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.str = LessEqualStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = GreaterEqualStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.str = NotEqualStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.expr = nil
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1655
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1663
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1685
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 321:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.str = BooleanModeStr
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.str = QueryExpansionStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.expr = nil
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.str = string("")
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.expr = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.expr = &NullVal{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2002
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.exprs = nil
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.orderBy = nil
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.str = AscScr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = AscScr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = DescScr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.limit = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.str = ForUpdateStr
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.str = ShareModeStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2122
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2135
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.updateExprs = nil
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.byt = 0
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.byt = 1
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.byt = 0
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.byt = 1
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.str = IgnoreStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2480
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			decNesting(yylex)
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2494
		{
			forceEOF(yylex)
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2499
		{
			forceEOF(yylex)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			forceEOF(yylex)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
